--- 
title: Coding For A Living
date: 12/03/2010

Giles recently pointed out that if it's true that many working programmers cannot actually code that well (evidently this is true), then the skills of _finding a programming job_ and _actually programming_ must be separate skills; it's possible to be good at one of them without being good at the other.

I can't really talk about finding "employment" as a programmer, because I've been a freelancer all of my programming career. I'm sure some veterans might be able to assure me that there are also freelancers who can't code very well, but I think it's harder to pull off.

Particularly in a small community. The twin cities for example; you might be able to pull off one or two short contracts without knowing what you're doing, but these cities are not that big. If you have no idea what you're doing, word will eventually get around that you are Not To Be Hired.

That said, I still think that Giles' separation of skills holds true in freelancing; it's possible to be good at coding, but not good at finding contracts. Without contracts (read: clients, gigs, projects, <em>income</em>), you're going to need to either dip into that savings account or go get another job.

So, how do you get the gigs? I'm doing this full-time, myself, so you'd think I know the answer to this question. I guess I do, though in many ways I have to think I may have just been very lucky. Truth is, in almost 2 years of freelancing, I've worked (primarily) on only three projects. One was a startup, the other two are largish rails projects done through other developers; in other words, subcontracting. I'm pretty sure this is not typical, though I don't personally have anything to compare it with; that said, I'm trying to look to the future, and to force myself to consider that falling into one large project after another may not be <em>de rigueur</em> going forward, in fact may be statistically unlikely. It's important (er, vital?) to think about how to find gigs.

I'm increasingly convinced that the old adage, _It's who you know_, is exactly true. Yes, you do need to know how to code; if you are _very_ lucky you might be able to get by with _barely_ knowing how to code, working for a lower rate, and _learning and ramping up your skills as fast as possible_. But to get a gig like that, someone needs to be willing to give you a chance, and they are probably not going to be willing to do that unless they know you, or you have been personally recommended by someone they do know.

<h3>Who you know</h3>

Networking doesn't come naturally for a lot of technically minded folks. In fact the very term throws a lot of people. I don't like it a whole lot myself, but I use the term because it's widely understood to represent the practice of knowing and being known by a broad, diverse, group of people. I'm slowly, even reluctantly, becoming convinced that you need to know people, and they need to know you, in order to find any success as a consultant, contractor, or freelancer.

This doesn't mean you need to size up everyone you meet in an effort to gauge how "useful" they can be to you. That's an absolute recipe for failure, in my opinion, if for no other reason than it's simply looking to use people. A better way to approach it is to try and think of ways in which you can help other people. Yes, you're also going to be thinking of whether and how they can help you, because you're human, and we simply think that way; but just don't *focus* on that. You don't have to, it'll cross your mind anyway. Instead, try to think of any way you can help the people you come across; even (especially!) for free. I don't mean work for free, but a little free advice never hurt. 

I'm not really skilled at this, but I do try to remember what peoples main skillsets and interests are, and where possible, I try to connect people to others who may be able to help or complement them. Know a designer who doesn't really code? Chances are you also know a coder who doesn't really design. These people need to know each other, even if they don't have an immediate need -- by the time they _do_ need to find a designer/coder, time can be an issue.

Areas of domain expertise are another good example. Try to remember if people you meet are really good at databases, specific programming languages, or platforms. I get asked a lot about iPhone programming, and while I usually don't have the time to take on these projects, I _always_ try to refer to someone else I know who _does_.

It's easy to read this and think, _yeah, sure, but this doesn't get me any *work*. I need to pay my bills!_ Yes, we all do. But ignoring other people ain't going to get you work either, and the great thing about getting work for other people &mdash; sincerely, genuinely, helping them out &mdash; is that they will remember you. Don't do it for this reason alone. But trust that you're building goodwill, you're building relationships that mean in the long run, at least someone knows who you are, and if someone asks them