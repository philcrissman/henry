--- 
title: script/console, Under The Hood
date: 24/07/2009

<img src="http://philcrissman.com/images/posts/3618515225_6446a9876b.jpg" />
Photo by <a href="http://www.flickr.com/photos/steffe/">Steffe</a>

I've recently started digging into script/console a little deeper. As a tool for Rails development, I think it's safe to say that words like "indispensable" come to mind when the topic of the console arises. That said, I've yet to see a really complete guide to using script/console -- lots and lots of collections of tips and tricks, but never a good solid guide to what's going on with script/console.

This is the first of what will hopefully be several posts about what's really going on when you open the rails console.
<!--more-->
If we look at just the console script, we'll find just these three lines:

<pre>
<code class="ruby">
#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../config/boot'
require 'commands/plugin'
</code>
</pre>

The first line is simply the shebang line that lets the file be an executable ruby script. The second line requires the file config/boot. This file is a little over a hundred lines by default, so we won't reproduce it here; you can read it quickly (if you want to) in one of your own rails projects. It basically sets some load paths and some constants, and ends by booting rails with <code>Rails.boot!</code>.

The third line requires <code>commands/console</code>... and that's it. So to see what's actually happening, we'll have to look there.

You can find <code>commands/console.rb</code> in <code>railties/lib</code> in your rails directory, in <code>vendor</code> if you have frozen rails to a specific version, or otherwise under your rails gem in the lib directory.

(e.g., on this machine it's in
 /usr/local/lib/ruby/gems/1.8/gems/rails/lib/commands/console.rb).

<code>console.rb</code> looks like this:

<pre>
<code class="ruby">
irb = RUBY_PLATFORM =~ /(:?mswin|mingw)/ ? 'irb.bat' : 'irb'

require 'optparse'

options = { :sandbox => false, :irb => irb }
OptionParser.new do |opt|
  opt.banner = "Usage: console [environment] [options]"
  opt.on('-s', '--sandbox', 'Rollback database modifications on exit.') { |v| options[:sandbox] = v }
  opt.on("--irb=[#{irb}]", 'Invoke a different irb.') { |v| options[:irb] = v }
  opt.on("--debugger", 'Enable ruby-debugging for the console.') { |v| options[:debugger] = v }
  opt.parse!(ARGV)
end

libs =  " -r irb/completion"
libs < < %( -r "#{RAILS_ROOT}/config/environment")
libs << " -r console_app"
libs << " -r console_sandbox" if options[:sandbox]
libs << " -r console_with_helpers"

if options[:debugger]
  begin
    require 'ruby-debug'
    libs << " -r ruby-debug"
    puts "=> Debugger enabled"
  rescue Exception
    puts "You need to install ruby-debug to run the console in debugging mode. With gems, use 'gem install ruby-debug'"
    exit
  end
end

ENV['RAILS_ENV'] = case ARGV.first
  when "p"; "production"
  when "d"; "development"
  when "t"; "test"
  else
    ARGV.first || ENV['RAILS_ENV'] || 'development'
end

if options[:sandbox]
  puts "Loading #{ENV['RAILS_ENV']} environment in sandbox (Rails #{Rails.version})"
  puts "Any modifications you make will be rolled back on exit"
else
  puts "Loading #{ENV['RAILS_ENV']} environment (Rails #{Rails.version})"
end
exec "#{options[:irb]} #{libs} --simple-prompt"
</code>
</pre>

There's a fair bit in there, so let's look at what it's doing in detail.

Line 1 is setting a local variable named <code>irb</code>. It checks to see if the constant <code>RAILS_PLATFORM</code> matches a value that would indicate we're using some flavor of Microsoft Windows; if we are, it sets <code>irb</code> to <code>irb.bat</code>, which is what irb will be named for a Windows build of ruby; otherwise it's set to simply <code>irb</code>, which is the commands name on *nix systems, including Mac OS X.

Next it requires 'optparse'. <code>optparse</code> is a Ruby library for parsing options (I imagine you guessed that).

Then a local variable named <code>options</code> is created, and is given a few default parameters: <code>:sandbox</code> is set to false (more on this in a moment), and <code>:irb</code> is set to the local variable irb (in other words, to either 'irb.bat' or 'irb', depending on the result of the expression on line 1).

An <code>OptionsParser</code> object is created next. We won't dive into the details of this, but you'll note a striking similarity to what you see in this block and what you'll see if you type <code>script/console -h</code> in your rails root.

So if we follow along, we'll read about the three standard command line arguments we can use when firing up the console:

<code>--sandbox</code>, which just adds the feature that any changes you make to the database will be undone at the end of your console session
<code>--irb</code>, which allows you to choose a different version of irb if applicable; so, if you have Ruby 1.9 installed, but not set as your default ruby version, you could start up the console with <code>script/console --irb=irb1.9</code>, and see how your console experiments work with Ruby 1.9.
<code>--debugger</code>, which enables ruby debugging.

Next a local variable named <code>libs</code> is created; it's a string, and a number of lines are concatenated to it, each in the form " -r [some library or module]". The libs variable is eventually going to be passed to irb when the console starts it; the -r switch to irb simple requires whatever the next argument is. So this is simply building a list of the modules and libraries which are going to be present when the console is fired up.

The next section handles the case where you have actually typed <code>script/console --debugger</code>; it tries to require ruby-debug, and if an exception is raised, it will helpfully suggest that you run <code>gem install ruby-debug</code>.

On line 31, console sets the environment; it looks at your first argument to see if you tried to specify an environment, and if not, sets it to either <code>ARGV.first</code> (the first argument, if applicable), <code>ENV['RAILS_ENV']</code> (whatever the environment is already set to), or as a last resort to '<code>development</code>' (which is probably what you want, most of the time, hence why you may only rarely use this feature).

If you try this by typing <code>script/console foo</code>, you'll see that console will try (and fail, unless you've created a foo environment) to find the file <code>/config/environments/foo.rb</code>. So as long as the environment you specify exists, the console will use it.

Now, since it's using <code>ARGV.first</code>, you might ask yourself why, if you type <code>script/console --sandbox</code>, the console does not try to load the "<code>--sandbox</code>" environment. Good question! The answer can be found up in line 11: <code>opt.parse!(ARGV)</code>. The <code>parse!</code> method parses destructively; it pulls any valid options out of <code>ARGV</code>, and then returns whatever's left over. So if <code>ARGV</code> started out as <code>"test --sandbox --irb=irb1.9"</code>, after <code>opts.parse!(ARGV)</code> it will just equal <code>"test"</code>. If nothing but valid options were supplied (i.e., no attempt to specify an environment), ARGV would be an empty string, and the environment will be set to either <code>ENV['RAILS_ENV'</code>], if it exists, or to 'development' if it doesn't.

So now console's figured out which environment to use, it checks to see if you've specified the sandbox option, and if you have, it prints a friendly message to remind you that anything you do to the database will be undone when you exit the console.

But wait, you might say. Other than print a message, it doesn't do anything; what actually makes the sandbox/database rollback work? Good question. If you look back up at lines 14-18, where the libs variable is set, you'll note that <code>console_sandbox</code> is required, but <em>only if</em> <code>options[:sandbox]</code> returns true. <code>console_sandbox</code> will take care of all that database rollback headache for us; so that's where it will come from.

There's only one line left: an <code>exec</code> expression. exec is going to execute the string you pass to it on the command line. So a plain vanilla run of script/console is actually running:

<pre>
<code  class="ruby">
irb -r irb/completion -r ~/your_rails_project_path/config/environment -r console_app -r console_with_helpers --simple_prompt
</code>
</pre>

If you really want to, you could just type all that every time you want to use the console, but I'm guessing you'll stick with script/console.

If you're thinking there must be a little more to it than this, you're right; you'll remember that when <code>libs</code> was created, the modules <code>console_app</code> and <code>console_with_helpers</code> were required. That may be what I write about next, but in the meantime, if you have Rails installed you can always just open those files up and see what's in them.

