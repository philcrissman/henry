--- 
title: How Would An Open Standard for Social Connectivity Work?
date: 21/05/2010

Quitting or abandoning Facebook is the zeitgeist of the moment. I'm all for that, though I share the sentiment that it _would_ be nice to replace it with something. Just something a little... less evil?

Diaspora seems a step in the right direction. I like the idea of a distributed social network, with a hosted option; it's a lot like Wordpress, but adapted to social networking <a href="#note_1">[1]</a> rather than blogging.

<div style="margin-left:30px"><a name="note_1">1</a> I don't really love the term "social networking", but since it's ubiquitous and everyone knows what it means, I'm just going to go ahead and use it anyways.
</div>

But though Diaspora might be a step in the right direction, I'd like to see this sort of thing go even further.

So, what if we could have an open standard that any site could implement? How could something like this work so that any site could use it, just like when you publish an RSS feed, all you need to do is share the URI and any site or software that can parse it can do what it likes with that file? When it comes to an area like social networking, this gets a little more complicated, but let's give it a shot.

For any sort of social networking, you must have at least two models: the Entity (person, organization, object, whatever), and the Relationship (connections that exist between various entities). Let's just leave it with those two for now, because if you have that, you could extend indefinitely afterwards. Now, what we'd like is for the Entity, the person, to be able to "live" anywhere; my "main" page could be my own homepage, some page I created somewhere else (Google sites, infogami, uh, angelfire? Whatever, anything), or a page (or pages) on some other site that simply implements the same open protocol.

The Entity might define several other major fields; it might have a collection of feeds, for example: a twitter-like :updates feed, a :photos feed (which could point to Flickr, some other gallery software, a photo-blog, or just a directory full of time-stamped jpg files, for that matter), and so on.

Now, there's a couple potential issues here. How does everyone "know" where your Entity _Home_ is, without requiring a single site like Facebook or Twitter to keep track of it all? Good question. Since we're just running a thought experiment here, what if it could be completely distributed? What if it could work like DNS? A whole system of servers which did nothing but track names (sigh, yeah, I guess everyone would need a unique name, but an email address ought to fit the bill for that; unique primary keys would be needed no matter how you do it) and where that name should point to. So you could "update" your Entity any time. You could host your info on your own server and then decide to change it to be somewhere else that also implemented this same standard; you'd just need to update the Social "entity name server" with the new "main" location, and everyone who has a link to you would now go there instead.

So about those "links". How would that work? Well, for maximum flexibility, let's assume a uni-directional connection, like twitter; I might follow you, you might follow me, and so forth. Could be tracked by flat files, a database, or whatever; it wouldn't really matter in most cases.

With relationships to other entities, now we need to think about privacy.Let's assume you we have a setting configuration DSL which says which of your feeds, other info is "public" and which is "private". For now I'm going to assume only those two options, but if you could implement one level of privacy, you ought to be able to implement multiple levels also. (e.g., a: public info anyone can see, b: extra info that only people who follow me can see, c: info that only people who _I also follow_ can see, d: info that I store that only I can see. You might be able to think of other privacy levels, but this would cover most situation, I think.) So, how to implement that privacy?

First thing that comes to mind is public/private key pairs. A relationship between